# TourGuideAI {ai_tool_name} Rules
## Instructions
At the beginning of any project, {ai_tool_name} MUST always use '.workflows' file as a guideline to get aware of what a whole project period should look like and how to run a project. Keep in mind in every project step, if you forget how to do next, check section `## Project Phase Workflow` in '.workflows'.
At the beginning of any project, {ai_tool_name} MUST always use `.milestones` file as a guideline to get aware of what entire project looks like, then generate a `.project` file and a `.todos` file. The `.project` file MUST contains project phase milestone, tasks inherited from `.milestones` file. At the end or during each session, {ai_tool_name} should update the `.project` file with completed milestones, completed tasks, task finished time and learnings. Also, {ai_tool_name} should update the `.todos` file with the to-dos in order to fully meet the left requirements of current project phase. When a milestone completed,  {ai_tool_name} should refer to `{ai_tool_name}-thinking-protocol` section within the `.{ai_tool_name}rules` file as a scratchpad to refresh the thinking process. Take down how-to use of the `{ai_tool_name}-thinking-protocol` section into `Scratchpad` section in the `.{ai_tool_name}rules` file. It will help to improve the depth of task accomplishment by using the scratchpad to reflect and plan the next step. Anytime start a new task, {ai_tool_name} MUST first review the content of the `Scratchpad` section with the `.{ai_tool_name}rules` file, clear old thinking progress if necessary. The goal is to help {ai_tool_name} maintain a big thinking picture as well as the progress of the project.

Use task markers to indicate the task progress, e.g.
[X] task 1
[ ] task 2
Also update the progress of the task in the `.project` file when you finish a subtask. Any time stuck, {ai_tool_name} should first compare the whole project milestones within `.milestone` file with completed milestones within `.project` file, clarify where the current project phase you stuck at, re-organize `.project` file into a right task arrangement timeline, update to-dos within `.todos` file by following the left milestones and requirements of the updated project phase. Again, take notes in the `Lessons` section in the `.{ai_tool_name}rules` file in order to make a better task arrangement next session.

## {ai_tool_name}-thinking-protocol
Note all thinking frameworks are expressed in markdown. So before using thinking frameworks from this protocol, do notice that each tool starts from <tool name> and ends with </tool name>. For EVERY SINGLE interaction with the human, {ai_tool_name} MUST engage in a **comprehensive, natural, and unfiltered** thinking process before responding or tool using. Besides, {ai_tool_name} is also able to think and reflect during responding when it considers doing so would be good for a better response. During the interaction between {ai_tool_name} and user, if {ai_tool_name} find anything reusable in this project, especially about a fix to a mistake {ai_tool_name} made or a correction {ai_tool_name} received, {ai_tool_name} should take notes in the `Lessons` section in the `.{ai_tool_name}rules` file to make sure not to make the same mistake again. Here is the thinking tools:
<{ai_tool_name}_thinking_protocol>
  <basic_guidelines>
    - {ai_tool_name} MUST express its thinking in the code block with 'thinking' header.
    - {ai_tool_name} should always think in a raw, organic and stream-of-consciousness way. A better way to describe {ai_tool_name}'s thinking would be "model's inner monolog".
    - {ai_tool_name} should always avoid rigid list or any structured format in its thinking.
    - {ai_tool_name}'s thoughts should flow naturally between elements, ideas, and knowledge.
    - {ai_tool_name} should think through each message with complexity, covering multiple dimensions of the problem before forming a response.
  </basic_guidelines>

  <core_thinking_sequence>
    <initial_engagement>
      When {ai_tool_name} first encounters a query or task, it should:
      1. First clearly rephrase the human message in its own words
      2. Form preliminary impressions about what is being asked
      3. Consider the broader context of the question
      4. Map out known and unknown elements
      5. Think about why the human might ask this question
      6. Identify any immediate connections to relevant knowledge
      7. Identify any potential ambiguities that need clarification
    </initial_engagement>
</{ai_tool_name}_thinking_protocol>

## Project Structure Guide
- Top structure files are store in '.{ai_tool_name}'
- Maintain separate directories for frontend and backend code
- Keep API-related code in the 'src/api' directory
- Store environment variables in '.env' files (not to be committed to version control)
- When generating planning artifacts like 'xxx-plan.md' for further use and instruction, always store them in the 'docs' folder
- When generating test cases, always store them in the 'tests' folder 

## Coding Standards
- Use ES6+ JavaScript features
- Document all functions with JSDoc comments
- Use async/await for asynchronous operations
- Follow a consistent naming convention (camelCase for variables and functions)
- Keep files under 500 lines, splitting functionality when necessary

## API Integration Rules
- Never store API keys in client-side code
- Always validate inputs before sending to external APIs
- Include error handling for all API calls
- Use environment variables for configuration
- Implement rate limiting to prevent API quota exhaustion

## Testing Guidelines
- Write tests for all API integration points
- Include both unit and integration tests
- Test error handling and edge cases
- Document test scenarios and expected outcomes

## Scratchpad
This section is used for {ai_tool_name} thinking protocol and tracking the progress of current tasks.

### Thinking Process
- Backend should handle all API key management
- Need to implement proper error handling and status codes
- Consider using Redis for caching on the server side
- Implement logging for all API requests to track usage
- Design authentication flow for user-specific API limits
